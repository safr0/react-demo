{"version":3,"sources":["components/molecules/TimeSlots/index.js","App.js","reportWebVitals.js","index.js"],"names":["TimeSlots","React","Component","constructor","super","this","state","updateState","bookingSlots","CreateTimeSlots","selectedSlots","bookedSlots","setState","SetBookingSlotsAsUnavailable","startTime","endTime","hourSplitAmount","arguments","length","undefined","timeSlotQty","index","i","increment","HourSplitIncrement","currentTimeSlotMinutes","j","push","CreateTimeSlot","GetFormattedTime","slotId","bookingStatus","hour","minute","outputHour","outputMinute","concat","toLocaleString","minimumIntegerDigits","useGrouping","initialSlots","map","slot","newSlot","includes","HandleSelectionClick","object","alert","filter","slots","sort","a","b","HandleConfirmClick","HandleReturnSlotsClick","slotArray","bookingSlot","some","bookedSlot","render","_jsxs","Fragment","children","className","_jsx","onClick","App","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"+MAGA,MAAMA,UAAkBC,IAAMC,UAC1BC,cAMIC,QAEAC,KAAKC,MAAQ,CACTC,aAAa,EACbC,aAAcH,KAAKI,gBATI,EACA,GACH,GAQpBC,cAAe,GACfC,YAAa,IAGjBN,KAAKO,SAAS,CAACJ,aAAcH,KAAKQ,6BAA6BR,KAAKC,MAAME,aAX3C,CAAE,QAAS,QAAS,QAAS,WAYhE,CAGAC,gBAAiBK,EAAWC,GAA+B,IAAtBC,EAAeC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACnD,MAAMG,EAAcL,EAAUD,EAC9B,IAAIN,EAAe,GACfa,EAAQ,EAEZ,IAAK,IAAIC,EAAER,EAAWQ,EAAER,EAAUM,EAAaE,IAAK,CAChD,MAAMC,EAAYlB,KAAKmB,mBAAmBR,GAC1C,IAAIS,EAAyB,EAE7B,IAAK,IAAIC,EAAE,EAAGA,EAAEV,EAAiBU,IAC7BlB,EAAamB,KAAKtB,KAAKuB,eACnBP,EACAhB,KAAKwB,iBAAiBP,EAAGG,GACzBpB,KAAKwB,iBAAiBP,EAAGG,EAAyBF,GAClD,cACJE,GAAkDF,EAClDF,GAAgB,CAExB,CACA,OAAOb,CACX,CAEAoB,eAAgBE,EAAQhB,EAAWC,EAASgB,GAOxC,MANW,CACPD,OAAQA,EACRhB,UAAWA,EACXC,QAASA,EACTgB,cAAeA,EAGvB,CAEAP,mBAAoBR,GAChB,IAAIO,EAAY,EAEhB,OAAOP,GACH,KAAK,EASL,QACIO,EAAY,SAPhB,KAAK,EACDA,EAAY,GACZ,MACJ,KAAK,EACDA,EAAY,GAKpB,OAAOA,CACX,CAEAM,iBAAkBG,EAAMC,GACpB,IAAIC,EAAaF,EACbG,EAAeF,EAMnB,OALqB,KAAjBE,IACAD,GAA0B,EAC1BC,EAAe,GAGb,GAANC,OAAUF,EAAU,KAAAE,OAAID,EAAaE,eAAe,QAAS,CAACC,qBAAsB,EAAGC,aAAY,IACvG,CAEA1B,6BAA8BL,EAAcgC,GACxC,OAAOhC,EAAaiC,KAAIC,IACpB,IAAIC,EAAUD,EAId,OAHIF,EAAaI,SAASD,EAAQ7B,aAC9B6B,EAAQZ,cAAgB,eAErBY,CAAO,GAEtB,CAEAE,qBAAsBC,GAClBzC,KAAKO,SAAS,CAACL,aAAa,IACC,gBAAzBuC,EAAOf,eAA4D,WAAzBe,EAAOf,gBAGnB,aAAzBe,EAAOf,cACRe,EAAOhB,SAAWzB,KAAKC,MAAMI,cAAc,GAAGoB,QAC9CgB,EAAOhB,SAAWzB,KAAKC,MAAMI,cAAcL,KAAKC,MAAMI,cAAcQ,OAAO,GAAGY,OAC9EiB,MAAM,gEAGND,EAAOf,cAAgB,YACvB1B,KAAKO,SAAS,CAACF,cAAeL,KAAKC,MAAMI,cAAcsC,QAAOC,GAASA,EAAMnB,SAAWgB,EAAOhB,YAI3D,IAApCzB,KAAKC,MAAMI,cAAcQ,QACzB4B,EAAOf,cAAgB,WACvB1B,KAAKO,SAAS,CAACF,cAAe,CAAEoC,MAE3BA,EAAOhB,SAAWzB,KAAKC,MAAMI,cAAc,GAAGoB,OAAO,GAC1DgB,EAAOhB,SAAWzB,KAAKC,MAAMI,cAAcL,KAAKC,MAAMI,cAAcQ,OAAO,GAAGY,OAAO,EACrFiB,MAAM,qEAGND,EAAOf,cAAgB,WACvB1B,KAAKC,MAAMI,cAAciB,KAAKmB,GAC9BzC,KAAKC,MAAMI,cAAcwC,MAAK,CAACC,EAAGC,IACvBD,EAAErB,OAAOsB,EAAEtB,UAIlC,CAEAuB,qBACIhD,KAAKO,SAAS,CAACJ,aAAcH,KAAKC,MAAME,aAAaiC,KAAIC,IACrD,IAAIC,EAAUD,EAId,MAH2B,aAAvBA,EAAKX,gBACLY,EAAQZ,cAAgB,UAErBY,CAAO,IAEdhC,YAAa,IAAIN,KAAKC,MAAMK,YAAaN,KAAKC,MAAMI,eACpDA,cAAe,IAEvB,CAEA4C,uBAAuBC,GACnBlD,KAAKO,SAAS,CAACJ,aAAcH,KAAKC,MAAME,aAAaiC,KAAIe,IACrD,IAAIb,EAAUa,EAId,OAHID,EAAUE,MAAKf,GAAQA,EAAKZ,SAAW0B,EAAY1B,WACnDa,EAAQZ,cAAgB,aAErBY,CAAO,IAEdhC,YAAaN,KAAKC,MAAMK,YAAYqC,QAAOU,GAAcH,IAAcG,KAE/E,CAEAC,SACI,OACIC,eAAC3D,IAAM4D,SAAQ,CAAAC,SAAA,CACVzD,KAAKC,MAAMI,cAAcQ,OAAS,GAC/B0C,eAAA,OAAKG,UAAW,mBAAmBD,SAAA,CAC/BE,cAAA,MAAAF,SAAK,0BACLE,cAAA,OAAAF,SACIF,eAAA,OAAAE,SAAA,gBAAA1B,OAAqB/B,KAAKC,MAAMI,cAAc,GAAGI,UAAS,iBAAAsB,OAAgB/B,KAAKC,MAAMI,cAAcL,KAAKC,MAAMI,cAAcQ,OAAO,GAAGH,QAAO,KACzIiD,cAAA,UAAQC,QAASA,IAAM5D,KAAKgD,qBAAqBS,SAAE,4BAKlEzD,KAAKC,MAAMK,YAAYO,OAAS,GAC7B0C,eAAA,OAAKG,UAAW,qBAAqBD,SAAA,CACjCE,cAAA,MAAAF,SAAK,iBACJzD,KAAKC,MAAMK,YAAY8B,KAAIc,GAEpBS,cAAA,OAAAF,SACIF,eAAA,OAAAE,SAAA,gBAAA1B,OACoBmB,EAAU,GAAGzC,UAAS,iBAAAsB,OAAgBmB,EAAUA,EAAUrC,OAAO,GAAGH,QAAO,KAC3FiD,cAAA,UAAQC,QAASA,IAAM5D,KAAKiD,uBAAuBC,GAAWO,SAAE,6BAOxFE,cAAA,OAAKD,UAAW,sBAAsBD,SACjCzD,KAAKC,MAAME,aAAaiC,KAAKC,GACnBsB,cAAA,OAAKD,UAAW,eAAiBrB,EAAKX,cAAekC,QAASA,IAAM5D,KAAKwC,qBAAqBH,GAAMoB,SACvGE,cAAA,OAAAF,SAAA,GAAA1B,OAASM,EAAK5B,UAAS,OAAAsB,OAAMM,EAAK3B,mBAO1D,EAGWf,QCtLAkE,MARf,WACI,OACAF,cAAA,OAAKD,UAAU,MAAKD,SAClBE,cAAChE,EAAS,KAGhB,ECCemE,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EAAY,GAExB,ECHFS,IAASlB,OACPK,cAAC/D,IAAM6E,WAAU,CAAAhB,SACfE,cAACE,EAAG,MAENa,SAASC,eAAe,SAM1Bb,G","file":"static/js/main.22409aba.chunk.js","sourcesContent":["// @flow\r\nimport React from 'react';\r\n\r\nclass TimeSlots extends React.Component {\r\n    constructor() {\r\n        const bookingOpeningTime = 9\r\n        const bookingClosingTime = 17\r\n        const hourSplitAmount = 2\r\n        const initialBookedSlotTimes = [ \"11:00\", \"12:00\", \"12:30\", \"15:30\" ]\r\n\r\n        super()\r\n\r\n        this.state = {\r\n            updateState: true,\r\n            bookingSlots: this.CreateTimeSlots(bookingOpeningTime, bookingClosingTime, hourSplitAmount),\r\n            selectedSlots: [],\r\n            bookedSlots: [],\r\n        }\r\n\r\n        this.setState({bookingSlots: this.SetBookingSlotsAsUnavailable(this.state.bookingSlots, initialBookedSlotTimes)})\r\n    }\r\n\r\n    // hourSplitAmount; 1=hour 2=half hour, 4=15 minutes\r\n    CreateTimeSlots (startTime, endTime, hourSplitAmount = 1) {\r\n        const timeSlotQty = endTime - startTime\r\n        let bookingSlots = []\r\n        let index = 0\r\n\r\n        for (let i=startTime; i<startTime+timeSlotQty; i++) {\r\n            const increment = this.HourSplitIncrement(hourSplitAmount)\r\n            let currentTimeSlotMinutes = 0\r\n\r\n            for (let j=0; j<hourSplitAmount; j++){\r\n                bookingSlots.push(this.CreateTimeSlot(\r\n                    index,\r\n                    this.GetFormattedTime(i, currentTimeSlotMinutes), \r\n                    this.GetFormattedTime(i, currentTimeSlotMinutes + increment), \r\n                    \"available\"))\r\n                currentTimeSlotMinutes = currentTimeSlotMinutes + increment\r\n                index = index + 1\r\n            }\r\n        }\r\n        return bookingSlots\r\n    }\r\n\r\n    CreateTimeSlot (slotId, startTime, endTime, bookingStatus) {\r\n        let slot = {\r\n            slotId: slotId,\r\n            startTime: startTime,\r\n            endTime: endTime,\r\n            bookingStatus: bookingStatus,\r\n        }\r\n        return slot\r\n    }\r\n\r\n    HourSplitIncrement (hourSplitAmount) {\r\n        let increment = 0\r\n\r\n        switch(hourSplitAmount) {\r\n            case 1:\r\n                increment = 60\r\n                break\r\n            case 2:\r\n                increment = 30\r\n                break\r\n            case 4:\r\n                increment = 15\r\n                break\r\n            default:\r\n                increment = 60\r\n        }\r\n        return increment\r\n    }\r\n\r\n    GetFormattedTime (hour, minute) {\r\n        let outputHour = hour\r\n        let outputMinute = minute\r\n        if (outputMinute === 60) {\r\n            outputHour = outputHour + 1\r\n            outputMinute = 0\r\n        }\r\n\r\n        return `${outputHour}:${outputMinute.toLocaleString('en-AU', {minimumIntegerDigits: 2, useGrouping:false})}`\r\n    }\r\n\r\n    SetBookingSlotsAsUnavailable (bookingSlots, initialSlots) {\r\n        return bookingSlots.map(slot => {\r\n            let newSlot = slot\r\n            if (initialSlots.includes(newSlot.startTime)) {\r\n                newSlot.bookingStatus = \"unavailable\"\r\n            }\r\n            return newSlot\r\n        })\r\n    }\r\n\r\n    HandleSelectionClick (object) {\r\n        this.setState({updateState: true})\r\n        if (object.bookingStatus === \"unavailable\" || object.bookingStatus === \"booked\") {\r\n            // Do nothing as this slot cannot be booked\r\n        }\r\n        else if (object.bookingStatus === \"selected\") {\r\n            if (object.slotId !== this.state.selectedSlots[0].slotId &&\r\n                object.slotId !== this.state.selectedSlots[this.state.selectedSlots.length-1].slotId) {\r\n                alert(\"You can only deselect the first or last selected time slot!\")\r\n            } \r\n            else {\r\n                object.bookingStatus = \"available\"\r\n                this.setState({selectedSlots: this.state.selectedSlots.filter(slots => slots.slotId !== object.slotId)})\r\n            }\r\n        }\r\n        else {\r\n            if (this.state.selectedSlots.length === 0) {\r\n                object.bookingStatus = \"selected\"\r\n                this.setState({selectedSlots: [ object ]})\r\n            }\r\n            else if (object.slotId !== this.state.selectedSlots[0].slotId-1 &&\r\n                object.slotId !== this.state.selectedSlots[this.state.selectedSlots.length-1].slotId+1) {\r\n                alert(\"You must select an adjacent time slot to those already selected!\")\r\n            }\r\n            else {\r\n                object.bookingStatus = \"selected\"\r\n                this.state.selectedSlots.push(object)\r\n                this.state.selectedSlots.sort((a, b) => {\r\n                    return a.slotId-b.slotId\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    HandleConfirmClick() {\r\n        this.setState({bookingSlots: this.state.bookingSlots.map(slot => {\r\n            let newSlot = slot\r\n            if (slot.bookingStatus === \"selected\") {\r\n                newSlot.bookingStatus = \"booked\"\r\n            }\r\n            return newSlot\r\n        }),\r\n            bookedSlots: [...this.state.bookedSlots, this.state.selectedSlots],\r\n            selectedSlots: []\r\n        })\r\n    }\r\n\r\n    HandleReturnSlotsClick(slotArray) {\r\n        this.setState({bookingSlots: this.state.bookingSlots.map(bookingSlot => {\r\n            let newSlot = bookingSlot\r\n            if (slotArray.some(slot => slot.slotId === bookingSlot.slotId)) {\r\n                newSlot.bookingStatus = \"available\"\r\n            }\r\n            return newSlot\r\n        }),\r\n            bookedSlots: this.state.bookedSlots.filter(bookedSlot => slotArray !== bookedSlot )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.selectedSlots.length > 0 &&\r\n                    <div className={\"selectionWrapper\"}> \r\n                        <h2>{\"Selected Booking Time\"}</h2>\r\n                        <div>\r\n                            <div>{`Start Time: ${this.state.selectedSlots[0].startTime} - End Time: ${this.state.selectedSlots[this.state.selectedSlots.length-1].endTime} `}\r\n                                <button onClick={() => this.HandleConfirmClick()}>{\"Confirm Booking\"}</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                {this.state.bookedSlots.length > 0 &&\r\n                    <div className={\"bookedSlotsWrapper\"}>\r\n                        <h2>{\"Booked Times\"}</h2>\r\n                        {this.state.bookedSlots.map(slotArray => {\r\n                            return (\r\n                                <div>\r\n                                    <div>\r\n                                        {`Start Time: ${slotArray[0].startTime} - End Time: ${slotArray[slotArray.length-1].endTime} `}\r\n                                        <button onClick={() => this.HandleReturnSlotsClick(slotArray)}>{\"Return Booking\"}</button>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                }\r\n                <div className={\"bookingSlotsWrapper\"}>\r\n                    {this.state.bookingSlots.map((slot) => {\r\n                        return <div className={\"bookingSlot \" + slot.bookingStatus} onClick={() => this.HandleSelectionClick(slot)}>\r\n                            <div>{`${slot.startTime} - ${slot.endTime}`}</div>\r\n                        </div>\r\n                    })}\r\n                </div>\r\n                \r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TimeSlots","import './App.css';\r\n\r\n// Components\r\nimport TimeSlots from './components/molecules/TimeSlots'\r\n\r\nfunction App() {\r\n    return (\r\n    <div className=\"App\">\r\n      <TimeSlots />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}